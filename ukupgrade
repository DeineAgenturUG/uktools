#!/bin/bash

# @author Mustafa Hasturk
# @mail mustafa.hasturk@yandex.com
# @author Caio Oliveira
# @mail caiooliveirafarias0@gmail.com
# @author Christoph Kepler
# @mail development@kepler.international
# @author Usb Key
# @mail usbkey9@gmail.com

help="Usage: ukupgrade [OPTION]...
Dowload and install last available kernel for ubuntu systems.
Settings can be saved if no options provided or by running setup script

  -r,			Get Release Candidate kernel (default: Stable kernel)
  -l,			Get Low Latency kernel (default: Generic kernel)
  -a,			Run ukpurge script after upgrade
  -h,			Show this help
  -simple,		Use default settings (stable, generic, no purge)

Examples:
  ukupgrade -simple	Download, install the last kernel using defaults settings
  ukupgrade -a		Use default settings but uninstall old kernels
"

#Follow symlink and cd to right directory
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
cd "$( cd -P "$( dirname "$SOURCE" )" && pwd )"

if ! which lynx > /dev/null; then sudo apt-get install lynx -y; fi

arch=$(dpkg --print-architecture)
trys=0

function cleanTmp() {
	sudo rm -rf /tmp/linux-*.deb
}

function fatalError() {
	echo $1;
	cleanTmp
	exit;
}

function download() {

	local filename=$(basename "$package");
	wget -q -P /tmp $package

	if [ $? == "1" ]; then fatalError "Download of $package failed!"; fi

	if [[ ! "${checksums[@]}" =~ "$(shasum /tmp/$filename | awk '{ print $1 }')" ]]; then
		echo "Checksum failed for $filename !!!";
		if [[ $trys > 3 ]]; then fatalError "Too many checksums fails !!! Exiting"; fi
		echo "Redownloading ...";
		download "$@";
	else
		echo "Checksum for $filename succeed";
	fi
}

function downloadMulti() {

	local packages=($(lynx -dump -listonly -dont-wrap-pre $kernelURL | grep "$1" | grep "$2" | grep "$3" | awk '{print $2}' | sort | uniq));
	for package in "${packages[@]}"
	do
		download $package
	done
}

function notifyUpdate() {

	if [[ -x "$(command -v notify-send)" ]]; then
		user=$(w -h | awk '{print $1}')
		userId=$(id -u $user)
		export DISPLAY=:0.0
		export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$userId/bus
		su $user -c "notify-send 'Kernel Updated' 'System restart required'"
	else
		touch /tmp/ukupgrade.nr
	fi
}

if [ "$1" = "-simple" ]; then
	source ./sample.uku.cfg ;
else
	if [ $# -eq 0 ]; then
		if [ ! -f ./uku.cfg ]; then ./setup ; fi
		source ./uku.cfg ;
	else
		source ./sample.uku.cfg ;

		while getopts 'rlph' flag; do
			case "${flag}" in
				r) kernelrc=1 ;;
				l) kernelmode='lowlatency' ;;
				p) arm=1 ;;
				h) 	echo "${help}";
					exit;
					;;
				*) 	echo "Unexpected option ${flag}";
					echo "${help}";
					exit;
					;;
			esac
		done
	fi ;
fi

case "$kernelrc" in
	1) kernelURL=$(lynx -dump -nonumbers http://kernel.ubuntu.com/~kernel-ppa/mainline/ | tail -1) ;;
	*) kernelURL="http://kernel.ubuntu.com/~kernel-ppa/mainline/"$(lynx -dump -nonumbers http://kernel.ubuntu.com/~kernel-ppa/mainline/ | grep -v rc | rev | cut -d '/' -f 2 | rev | grep -E 'v.+' | sort -V | rev | cut -d ' ' -f 1 | rev | tail -1)"/" ;;
esac

checksums="$(wget -qO- $kernelURL/CHECKSUMS)"

# Same version test
reqVersion=$(echo $kernelURL | awk -F"/v" '{print $2}' | cut -d'/' -f 1)
locVersion=$(dpkg -l |grep linux-image | grep $kernelmode | awk '{print $3}' | sed -e 's/.0-.*rc/.rc/' | cut -d'-' -f 1 | sed -e 's/.rc/-rc/')

if grep -Fxq "$reqVersion" <<< "$locVersion"; then
	echo 'Kernel up to date. Finishing'
	exit
fi

cat << EOF

Cleaning old downloads in /tmp
EOF
cleanTmp

cat << EOF

Downloading the kernel's components...
EOF
downloadMulti "$kernelmode" "" "$arch"

cat << EOF

Downloading the shared kernel header...
EOF
downloadMulti "all" "headers" ""

cat << EOF

Installing Kernel and Headers...
EOF

while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
	sleep 0.5
done

sudo dpkg -i /tmp/linux-*.deb
if [[ $? > 0 ]]; then fatalError "Installation failed !!! Exiting"; fi

cleanTmp
notifyUpdate

cat << EOF

Finished.
EOF

if [ $arm = 1 ]; then ./ukpurge ; fi

if [ $cron = 0 ]; then
	read -p 'Do you want to reboot system now? (y/n)(10s to No): ' -n 1 -t 10 -s rs
	case "$rs" in
		y | Y)
			echo "Yes, reboot this now!"
			sleep 2
			sudo reboot ;;
		*) echo 'No, stay this wake uped!' ;;
	esac ;
fi
