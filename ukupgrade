#!/bin/bash

# @author Usb Key
# @mail usbkey9@gmail.com
# @author Mustafa Hasturk
# @mail mustafa.hasturk@yandex.com
# @author Caio Oliveira
# @mail caiooliveirafarias0@gmail.com
# @author Christoph Kepler
# @mail development@kepler.international

#Follow symlink and cd to right directory
SOURCE="${BASH_SOURCE[0]}"
while [[ -h "$SOURCE" ]]; do
	DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
	SOURCE="$(readlink "$SOURCE")"
	[[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
cd "$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source ./common $$


server="kernel.ubuntu.com";
fullUrl="http://$server/~kernel-ppa/mainline/";
arch=$(dpkg --print-architecture);
trys=0;
help="Usage: ukupgrade [OPTION]...
Dowload and install last available kernel for ubuntu systems.
Settings can be saved if no options provided or by running setup script

  -r,			Get Release Candidate kernel (default: Stable kernel)
  -l,			Get Low Latency kernel (default: Generic kernel)
  -p,			Run ukpurge script after upgrade
  -h,			Show this help
  --simple,		Use default settings (stable, generic, no auto run, no purge)

Examples:
  ukupgrade --simple	Download, install the last kernel using defaults settings
  ukupgrade -p		Use default settings but uninstall old kernels
";

function cleanTmp() {
	sudo rm -rf /tmp/linux-*.deb
}

function download() {
	local filename=$(basename "$package");

	if ! execCmd "wget -q -P /tmp $package"; then fatalError "Download of $package failed!"; fi

	if [[ ! "${checksums[@]}" =~ "$(shasum /tmp/$filename | awk '{ print $1 }')" ]]; then
		echo "Checksum failed for $filename !!!";

		((trys++))
		if [[ $trys > 3 ]]; then fatalError "Too many checksums fails !!! Exiting"; fi

		echo "Redownloading ...";
		download "$@";
	else
		echo "Checksum for $filename succeed";
	fi
}

function downloadMulti() {
	local packages=($(lynx -dump -listonly -dont-wrap-pre $kernelURL | grep "$1" | grep "$2" | grep "$3" | awk '{print $2}' | sort | uniq));

	if [[ ${#packages[@]} < 1 ]]; then
		fatalError "Kernel package missing. Please wait until next release";
	fi;

	for package in "${packages[@]}"
	do
		download $package
	done
}

function notifyUpdate() {
	if [[ -x "$(command -v notify-send)" ]]; then
		user=$(w -h | awk '{print $1}' | head -n 1)
		userId=$(id -u $user)
		export DISPLAY=:0.0
		export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$userId/bus
		su $user -c "notify-send 'Kernel Updated to $1' 'System restart required'"
	fi

	touch /tmp/ukupgrade.nr
}

function checkSameVersion() {
	local locVersion=$(dpkg -l |grep "linux-image" | grep "$kernelmode" | awk '{print $3}' | sed -e 's/-/./' | cut -d'.' -f-4 | sed -e 's/.0.*rc/-rc/' | cut -d'.' -f-3)

	if [[ $locVersion =~ $reqVersion ]]; then
		echo "Kernel up to date. Finishing"
		exit
	fi
}

function waitDpkg() {
	while execCmd "fuser /var/lib/dpkg/lock"; do
		sleep 0.5
	done
}

if ! execCmd "dpkg -s lynx"; then
    waitDpkg
    sudo apt-get install lynx -y;
fi

displayTitle "UkTools Upgrade";

if ! execCmd "ping -q -w 1 -c 1 $server"; then fatalError "No network available !!! Exiting"; fi

if [[ "$1" = "--simple" ]]; then
	source $splPath ;
else
	if [[ "$#" = "0" ]]; then
		if [[ ! -f $cfgPath ]]; then ./setup -noup; fi
		source $cfgPath ;
	else
		source $splPath ;

		while getopts 'rlph' flag; do
			case "${flag}" in
				r)	kernelrc=1 ;;
				l)	kernelmode="lowlatency" ;;
				p)	arm=1 ;;
				h)	echo "${help}";
					exit ;;
				*)	echo "Unexpected option ${flag}";
					echo "${help}";
					exit ;;
			esac
		done
	fi ;
fi

case "$kernelrc" in
	1) kernelURL=$(lynx -dump -nonumbers $fullUrl | tail -1) ;;
	*) kernelURL="$fullUrl"$(lynx -dump -nonumbers "$fullUrl" | rev | cut -d'/' -f 2 | rev | egrep "^v[0-9]*[.][0-9]*([.][0-9]*)?$" | sort -V | tail -1)"/" ;;
esac

reqVersion=$(echo $kernelURL | awk -F"/v" '{print $2}' | cut -d'/' -f 1)

checkSameVersion

if ! execCmd "sudo echo 0"; then fatalError "Permission denied. Require sudo access"; fi

checksums="$(wget -qO- $kernelURL/CHECKSUMS)"

displaySubTitle "Downloading Linux Kernel $reqVersion";

cleanTmp

downloadMulti "$kernelmode" "" "$arch"

downloadMulti "all" "headers" ""

waitDpkg

displaySubTitle "Installing Linux Kernel $reqVersion";

if ! execCmd "sudo dpkg -i /tmp/linux-*.deb" 1; then fatalError "Installation failed !!! Exiting"; fi

cleanTmp

notifyUpdate $reqVersion

echo
displaySubTitle "Upgrade Finished";

if [[ $arm = 1 ]]; then ./ukpurge ; fi

if [[ $cron = 0 ]]; then
	read -p "Do you want to reboot system now? (y/n)(10s to No):" -n 1 -t 10 -s rs
	case "$rs" in
		y | Y)
			echo "Yes, reboot this now!"
			sleep 2
			sudo reboot ;;
		*) echo "No, stay this wake uped!" ;;
	esac ;
fi
